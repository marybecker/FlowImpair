dim(fmh)
fmh
fmh$site<-paste("S",fmh$site)
fmh$site
fmh<- flowmetric[,c("site","DN","FPL","G4FPL","GNFPL","MA","T1")]
fmh$site<- as.factor(fmh$site)
fmh<-as.data.frame(t(fmh))
paste("S",fmh$site)
fmh<- flowmetric[,c("site","DN","FPL","G4FPL","GNFPL","MA","T1")]
fmh$site<- as.factor(fmh$site)
fmh<-as.data.frame(t(fmh))
fmh<- flowmetric[,c("site","DN","FPL","G4FPL","GNFPL","MA","T1")]
fmh<-as.data.frame(t(fmh))
fmh
fmh$site<-paste("S",fmh$site)
fmh
fmh[,1]
fmh[1,]
fmh<- flowmetric[,c("site","DN","FPL","G4FPL","GNFPL","MA","T1")]
fmh<-as.data.frame(t(fmh))
fmh[1,]<-paste("S",fmh$site)
fmh
fmh<- flowmetric[,c("site","DN","FPL","G4FPL","GNFPL","MA","T1")]
fmh<-as.data.frame(t(fmh))
fmh[1,]
colnames(fmh)<-fmh[1,]
fmh
names(flowmetric)
flowmetric$SName
fmh<- flowmetric[,c("DN","FPL","G4FPL","GNFPL","MA","T1")]
colnames(fmh)<-flowmetric$SName
fmh<- flowmetric[,c("DN","FPL","G4FPL","GNFPL","MA","T1")]
fmh<-as.data.frame(t(fmh))
colnames(fmh)<-flowmetric$SName
fmh
fmh[1,]
fmh[1,]<-fmh[1,]/123
fmh
fobs
fobs[1:10,]
fmh
fmh[5,]<-fmh[5,]/6
fmh
fmh<- flowmetric[,c("DN","FPL","G4FPL","GNFPL","MA")]
fmh<-as.data.frame(t(fmh))
colnames(fmh)<-flowmetric$SName
fmh[1,]<-1-(fmh[1,]/123)
fmh[2,]<-fmh[2,]
fmh[5,]<-1-(fmh[5,]/6)
fmh
library(lattice)
levelplot(fmh,at=seq(0,1,0.01),
col.regions=topo.colors(100),scales=list(cex=0.4),
xlab="",ylab="",main="Metrics Scaled 0 - 1(Little Flow Impact to Highly Flow Impacted)")
fmh<- as.matric(fmh)
fmh<- as.matrix(fmh)
levelplot(fmh,at=seq(0,1,0.01),
col.regions=topo.colors(100),scales=list(cex=0.4),
xlab="",ylab="",main="Metrics Scaled 0 - 1(Little Flow Impact to Highly Flow Impacted)")
fmh
fmh<- flowmetric[,c("DN","FPL","G4FPL","GNFPL","MA")]
fmh
row.names(fmh)<-flowmetric$SName
fmh
fmh[,1]<-1-(fmh[1,]/123)
fmh[,2]<-fmh[2,]
fmh[,5]<-1-(fmh[5,]/6)
fmh<- as.matrix(fmh)
fmh<- flowmetric[,c("DN","FPL","G4FPL","GNFPL","MA")]
#fmh<-as.data.frame(t(fmh))
row.names(fmh)<-flowmetric$SName
fmh[,1]<-1-(fmh[,1]/123)
fmh[,2]<-fmh[,2]
fmh[,5]<-1-(fmh[,5]/6)
fmh
fmh<- flowmetric[,c("DN","FPL","G4FPL","GNFPL","MA")]
#fmh<-as.data.frame(t(fmh))
row.names(fmh)<-flowmetric$SName
fmh[,1]<-1-(fmh[,1]/123)
fmh[,2]<-fmh[,2]
fmh[,5]<-1-(fmh[,5]/4)
fmh
fmh<- flowmetric[,c("DN","FPL","G4FPL","GNFPL","MA")]
#fmh<-as.data.frame(t(fmh))
row.names(fmh)<-flowmetric$SName
fmh[,1]<-1-(fmh[,1]/123)
fmh[,2]<-fmh[,2]
fmh[,5]<-ifelse((1-(fmh[,5]/4))<0,0,(1-(fmh[,5]/4)))
fmh
fmh<- as.matrix(fmh)
library(lattice)
levelplot(fmh,at=seq(0,1,0.01),
col.regions=topo.colors(100),scales=list(cex=0.4),
xlab="",ylab="",main="Metrics Scaled 0 - 1(Little Flow Impact to Highly Flow Impacted)")
levelplot(fmh,at=seq(0,1,0.1),
col.regions=topo.colors(100),scales=list(cex=0.4),
xlab="",ylab="",main="Metrics Scaled 0 - 1(Little Flow Impact to Highly Flow Impacted)")
levelplot(fmh,at=seq(0,1,0.1),
col.regions=cm.colors(100),scales=list(cex=0.4),
xlab="",ylab="",main="Metrics Scaled 0 - 1(Little Flow Impact to Highly Flow Impacted)")
levelplot(fmh,at=seq(0,1,0.1),
col.regions=terrain.colors(100),scales=list(cex=0.4),
xlab="",ylab="",main="Metrics Scaled 0 - 1(Little Flow Impact to Highly Flow Impacted)")
fmh<- flowmetric[,c("DN","FPL","G4FPL","MA")]
#fmh<-as.data.frame(t(fmh))
row.names(fmh)<-flowmetric$SName
fmh[,1]<-1-(fmh[,1]/123)
fmh[,2]<-fmh[,2]
fmh[,5]<-ifelse((1-(fmh[,5]/4))<0,0,(1-(fmh[,5]/4)))
fmh<- as.matrix(fmh)
library(lattice)
levelplot(fmh,at=seq(0,1,0.1),
col.regions=terrain.colors(100),scales=list(cex=0.4),
xlab="",ylab="",main="Metrics Scaled 0 - 1(Little Flow Impact to Highly Flow Impacted)")
parse_fstat<-function(fstat_lines,skip='#',delim='\t'){
x<-1;
while(x<length(fstat_lines) && startsWith(fstat_lines[x],skip)){
x<-x+1;
}
header<-strsplit(fstat_lines[x],delim)[[1]];
D<-as.data.frame(matrix('',ncol=length(header),nrow=length(fstat_lines)-x),stringsAsFactors=F);
colnames(D)<-header;
for(i in x+2:length(fstat_lines)){
r<-strsplit(fstat_lines[i],delim)[[1]];
D[i-x-1,1:length(r)]<-r;
}
D
}
#character string from right
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
site_url<-https://waterservices.usgs.gov/nwis/site/?format=rdb&stateCd=ct&siteStatus=active&hasDataTypeCd=dv
site_url<-'https://waterservices.usgs.gov/nwis/site/?format=rdb&stateCd=ct&siteStatus=active&hasDataTypeCd=dv'
sites<-parse_fstat(readLines(site_url))
sites
sites[1:10,]
library(geosphere)
s1x<-sites[1,c(5,6)]
s1x
sy<-c(41.9337,-73.3908)
sy
distm(sx,sy)
sx
sx<-sites[1,c(5,6)]
sy<-c(41.9337,-73.3908)
distm(sx,sy)
sx<-sites[1,c(6,5)]
sy<-c(-73.3908,41.9337)
distm(sx,sy)
sx
distm(c(-71.8342361,41.4748222),c(-73.3908,41.9337))
sx<-as.vector(sites[1,c(6,5)])
sy<-c(-73.3908,41.9337)
distm(sx,sy)
sx
sites[1,5]
distm(c(sites[1,6],sites[1,5]),sy)
distm(c(sites[1,6],sites[1,5]),c(-73.3908,41.9337))
sx
x1<-sites[1,6]
x2<-sites[1,5]
x1
x2
distm(c(x1,x2),c(-73.3908,41.9337))
x1
x1<-as.numeric(sites[1,6])
x2<-as.numeric(sites[1,5])
x1
distm(c(x1,x2),c(-73.3908,41.9337))
x1<-as.numeric(sites[1,c(6,5)])
x1
distm(x1,c(-73.3908,41.9337))
sx<-as.numeric(sites[1,c(6,5)])
sy<-c(-73.3908,41.9337)
distm(sx,sy)
sites[2]
dim(sites[2])
dim(sites[1:2])
dim(sites[2])
dim(sites)[2]
dim(sites)[1]
sdist<-data.frame(dist=double())
sdist
sdist[1]<-d
d<-1
sdist[1]<-d
sdist[1,]<-d
sdist
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
sy<-c(-73.3908,41.9337)
d<-distm(sx,sy)
sdist[i,]<-d
}
sdist
View(sites)
site_url<-'https://waterservices.usgs.gov/nwis/site/?format=rdb&stateCd=ct&siteType=ST&siteStatus=all&hasDataTypeCd=dv'
sites<-parse_fstat(readLines(site_url))
View(sites)
site_url<-'https://waterservices.usgs.gov/nwis/site/?format=rdb&stateCd=ct&siteType=ST&siteStatus=active&hasDataTypeCd=dv'
sites<-parse_fstat(readLines(site_url))
View(sites)
sites_NA<- sites[is.na(sites$site_no),]
sites_NA
sites_NA<- sites[!is.na(sites$site_no),]
sites_NA
sites<- sites[!is.na(sites$site_no),]
sites
View(sites)
View(sites)
site_url<-'https://waterservices.usgs.gov/nwis/site/?format=rdb&stateCd=ct&siteType=ST&siteStatus=active&hasDataTypeCd=dv'
sites<-parse_fstat(readLines(site_url))
sites<- sites[!is.na(sites$site_no),]
sdist<-data.frame(dist=double())
####Calculate geodestic distance (WGS84)####
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
sy<-c(-73.3908,41.9337)
d<-distm(sx,sy)
sdist[i,]<-d
}
sdist
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
sy<-c(-73.3908,41.9337)
d<-distm(sx,sy)
sdist[i,2]<-d
}
sdist
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
sy<-c(-73.3908,41.9337)
d<-distm(sx,sy)
sdist[i,1]<-d
}
sdist
site_url<-'https://waterservices.usgs.gov/nwis/site/?format=rdb&stateCd=ct&siteType=ST&siteStatus=active&hasDataTypeCd=dv'
sites<-parse_fstat(readLines(site_url))
sites<- sites[!is.na(sites$site_no),]
sdist<-data.frame(dist=double())
####Calculate geodestic distance (WGS84)####
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
sy<-c(-73.3908,41.9337)
d<-distm(sx,sy)
sdist[i,1]<-d
}
sdist
names(sites)
sites[1,2]
site_url<-'https://waterservices.usgs.gov/nwis/site/?format=rdb&stateCd=ct&siteType=ST&siteStatus=active&hasDataTypeCd=dv'
sites<-parse_fstat(readLines(site_url))
sites<- sites[!is.na(sites$site_no),]
sdist<-data.frame(dist=double(),site_no=character())
####Calculate geodestic distance (WGS84)####
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
sy<-c(-73.3908,41.9337)
d<-distm(sx,sy)
sdist[i,1]<-d
sdist[i,2]<-sites[i,2]
}
sdist
sites[1,2]
sites[2,2]
sdist[1,2]
site_url<-'https://waterservices.usgs.gov/nwis/site/?format=rdb&stateCd=ct&siteType=ST&siteStatus=active&hasDataTypeCd=dv'
sites<-parse_fstat(readLines(site_url))
sites<- sites[!is.na(sites$site_no),]
sdist<-data.frame(dist=double(),site_no=character(),stringsAsFactors=FALSE)
####Calculate geodestic distance (WGS84)####
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
sy<-c(-73.3908,41.9337)
d<-distm(sx,sy)
sdist[i,1]<-d
sdist[i,2]<-sites[i,2]
}
sdist
setwd("P:\Projects\GitHub_Prj\FlowImpair")
camsites<-read.csv("TrailCamSites2018.csv",header=TRUE)
setwd("P:/Projects/GitHub_Prj/FlowImpair")
camsites<-read.csv("TrailCamSites2018.csv",header=TRUE)
camsites
camsites[1,c(3,4)]
parse_fstat<-function(fstat_lines,skip='#',delim='\t'){
x<-1;
while(x<length(fstat_lines) && startsWith(fstat_lines[x],skip)){
x<-x+1;
}
header<-strsplit(fstat_lines[x],delim)[[1]];
D<-as.data.frame(matrix('',ncol=length(header),nrow=length(fstat_lines)-x),stringsAsFactors=F);
colnames(D)<-header;
for(i in x+2:length(fstat_lines)){
r<-strsplit(fstat_lines[i],delim)[[1]];
D[i-x-1,1:length(r)]<-r;
}
D
}
#character string from right
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
site_url<-'https://waterservices.usgs.gov/nwis/site/?format=rdb&stateCd=ct&siteType=ST&siteStatus=active&hasDataTypeCd=dv'
sites<-parse_fstat(readLines(site_url))
sites<- sites[!is.na(sites$site_no),]
sdist<-data.frame(dist_M=double(),site_no=character(),stringsAsFactors=FALSE)
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
for (i in 1:dim(camsites)[1]){
sy<-as.numeric(camsites[i,c(3,4)])
d<-distm(sx,sy)
sdist[i,1]<-d
sdist[i,2]<-sites[i,2]
}
}
View(sdist)
for (j in 1:dim(camsites)[1]){
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
sy<-as.numeric(camsites[j,c(3,4)])
d<-distm(sx,sy)
sdist[i,1]<-d
sdist[i,2]<-sites[i,2]
}
}
View(sdist)
for (j in 1:dim(camsites)[1]){
sy<-as.numeric(camsites[j,c(3,4)])
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
d<-distm(sx,sy)
sdist[i,1]<-d
sdist[i,2]<-sites[i,2]
}
}
camsites$STA_SEQ[1]
sdist<-data.frame(dist_M=double(),site_no=character(),STA_SEQ=numeric(),stringsAsFactors=FALSE)
sdist<-data.frame(dist_M=double(),site_no=character(),STA_SEQ=numeric(),stringsAsFactors=FALSE)
sdist2<-data.frame(dist_M=double(),site_no=character(),STA_SEQ=numeric(),stringsAsFactors=FALSE)
for (i in 1:dim(camsites)[1])  {
sy<-as.numeric(camsites[j,c(3,4)])
for (j in 1:dim(sites)[1]){
sx<-as.numeric(sites[j,c(6,5)])
d<-distm(sx,sy)
sdist[j,1]<-d
sdist[j,2]<-sites[j,2]
sdist[j,3]<-camsites$STA_SEQ[1]
}
rbind(sdist2,sdist)
}
View(sdist)
for (i in 1:dim(camsites)[1])  {
sy<-as.numeric(camsites[j,c(3,4)])
for (j in 1:dim(sites)[1]){
sx<-as.numeric(sites[j,c(6,5)])
d<-distm(sx,sy)
sdist[j,1]<-d
sdist[j,2]<-sites[j,2]
sdist[j,3]<-camsites$STA_SEQ[1]
}
}
View(sdist)
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
sy<-as.numeric(camsites[i,c(3,4)])
d<-distm(sx,sy)
sdist[i,1]<-d
sdist[i,2]<-sites[j,2]
}
View(sdist)
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
sy<-as.numeric(camsites[1,c(3,4)])
d<-distm(sx,sy)
sdist[i,1]<-d
sdist[i,2]<-sites[j,2]
}
View(sdist)
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
sy<-as.numeric(camsites[1,c(3,4)])
d<-distm(sx,sy)
sdist[i,1]<-d
sdist[i,2]<-sites[i,2]
}
View(sdist)
View(sdist)
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
sy<-as.numeric(camsites[1,c(3,4)])
d<-distm(sx,sy)
sdist[i,1]<-d
sdist[i,2]<-sites[i,2]
sdist[i,3]<-camsites$STA_SEQ[1]
}
sdist<-data.frame(dist_M=double(),site_no=character(),STA_SEQ=numeric(),stringsAsFactors=FALSE)
j<-2
####Calculate geodestic distance (WGS84)####
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
sy<-as.numeric(camsites[j,c(3,4)])
d<-distm(sx,sy)
sdist[i,1]<-d
sdist[i,2]<-sites[i,2]
sdist[i,3]<-camsites$STA_SEQ[j]
}
sdist
camsites
for(j in 1:dim(camsites)[1]){
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
sy<-as.numeric(camsites[j,c(3,4)])
d<-distm(sx,sy)
sdist[i,1]<-d
sdist[i,2]<-sites[i,2]
sdist[i,3]<-camsites$STA_SEQ[j]
write.csv(sdist,paste0("sdist",camsites$STA_SEQ[j],".csv"))
}
}
for(j in 1:dim(camsites)[1]){
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
sy<-as.numeric(camsites[j,c(3,4)])
d<-distm(sx,sy)
sdist[i,1]<-d
sdist[i,2]<-sites[i,2]
sdist[i,3]<-camsites$STA_SEQ[j]
write.csv(sdist,paste0("/sdist","sdist",camsites$STA_SEQ[j],".csv"))
}
}
sdist
sdist[sdist$dist_M==min(sdist$dist_M),]
min(sdist$dist_M)
for(j in 1:dim(camsites)[1]){
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
sy<-as.numeric(camsites[j,c(3,4)])
d<-distm(sx,sy)
sdist[i,1]<-d
sdist[i,2]<-sites[i,2]
sdist[i,3]<-camsites$STA_SEQ[j]
write.csv(sdist,paste0("sdist",camsites$STA_SEQ[j],".csv"))
}
}
sdist
min(sdist$dist_M)
sdist$dist_M
camsites
sites
for(j in 1:dim(camsites)[1]){
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
sy<-as.numeric(camsites[j,c(4,3)])
d<-distm(sx,sy)
sdist[i,1]<-d
sdist[i,2]<-sites[i,2]
sdist[i,3]<-camsites$STA_SEQ[j]
write.csv(sdist,paste0("sdist",camsites$STA_SEQ[j],".csv"))
}
}
min(sdist$dist_M)
sdist$dist_M
min(sdist$dist_M,na.rm=TRUE)
sdist[sdist$dist_M==min(sdist$dist_M,na.rm=TRUE),]
sdist<-complete.cases(sdist)
sdist
sites
sites<-sites[1:70,]
sites
sdistmin<-data.frame(dist_M=double(),site_no=character(),STA_SEQ=numeric(),stringsAsFactors=FALSE)
sdisttest[1,]
sdisttest<-sdist[1,]
sdist[1,]
sdist
sdist<-data.frame(dist_M=double(),site_no=character(),STA_SEQ=numeric(),stringsAsFactors=FALSE)
sdistmin<-data.frame(dist_M=double(),site_no=character(),STA_SEQ=numeric(),stringsAsFactors=FALSE)
for(j in 1:dim(camsites)[1]){
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
sy<-as.numeric(camsites[j,c(4,3)])
d<-distm(sx,sy)
sdist[i,1]<-d
sdist[i,2]<-sites[i,2]
sdist[i,3]<-camsites$STA_SEQ[j]
write.csv(sdist,paste0("sdist",camsites$STA_SEQ[j],".csv"))
}
sdistmin[j,]<-sdist[sdist$dist_M==min(sdist$dist_M,na.rm=TRUE),]
}
sdistmin
merge(sdistmin,camsites,by="STA_SEQ")
View(sites)
sites
for(j in 1:dim(camsites)[1]){
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
sy<-as.numeric(camsites[j,c(4,3)])
d<-distm(sx,sy)
sdist[i,1]<-d
sdist[i,2]<-sites[i,2]
sdist[i,3]<-camsites$STA_SEQ[j]
#write.csv(sdist,paste0("sdist",camsites$STA_SEQ[j],".csv"))
}
sdistmin[j,]<-sdist[sdist$dist_M==min(sdist$dist_M,na.rm=TRUE),]
}
sdistmin
sdistmin<-merge(sdistmin,camsites,by="STA_SEQ")
sdistmin
sdistmin<-merge(sdistmin,sites,byx="site_no")
sdistmin
write.csv(sdistmin,"sdistmin.csv",row.names=FALSE)
