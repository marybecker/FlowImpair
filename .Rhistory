}
}
View(sdist)
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
sy<-as.numeric(camsites[i,c(3,4)])
d<-distm(sx,sy)
sdist[i,1]<-d
sdist[i,2]<-sites[j,2]
}
View(sdist)
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
sy<-as.numeric(camsites[1,c(3,4)])
d<-distm(sx,sy)
sdist[i,1]<-d
sdist[i,2]<-sites[j,2]
}
View(sdist)
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
sy<-as.numeric(camsites[1,c(3,4)])
d<-distm(sx,sy)
sdist[i,1]<-d
sdist[i,2]<-sites[i,2]
}
View(sdist)
View(sdist)
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
sy<-as.numeric(camsites[1,c(3,4)])
d<-distm(sx,sy)
sdist[i,1]<-d
sdist[i,2]<-sites[i,2]
sdist[i,3]<-camsites$STA_SEQ[1]
}
sdist<-data.frame(dist_M=double(),site_no=character(),STA_SEQ=numeric(),stringsAsFactors=FALSE)
j<-2
####Calculate geodestic distance (WGS84)####
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
sy<-as.numeric(camsites[j,c(3,4)])
d<-distm(sx,sy)
sdist[i,1]<-d
sdist[i,2]<-sites[i,2]
sdist[i,3]<-camsites$STA_SEQ[j]
}
sdist
camsites
for(j in 1:dim(camsites)[1]){
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
sy<-as.numeric(camsites[j,c(3,4)])
d<-distm(sx,sy)
sdist[i,1]<-d
sdist[i,2]<-sites[i,2]
sdist[i,3]<-camsites$STA_SEQ[j]
write.csv(sdist,paste0("sdist",camsites$STA_SEQ[j],".csv"))
}
}
for(j in 1:dim(camsites)[1]){
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
sy<-as.numeric(camsites[j,c(3,4)])
d<-distm(sx,sy)
sdist[i,1]<-d
sdist[i,2]<-sites[i,2]
sdist[i,3]<-camsites$STA_SEQ[j]
write.csv(sdist,paste0("/sdist","sdist",camsites$STA_SEQ[j],".csv"))
}
}
sdist
sdist[sdist$dist_M==min(sdist$dist_M),]
min(sdist$dist_M)
for(j in 1:dim(camsites)[1]){
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
sy<-as.numeric(camsites[j,c(3,4)])
d<-distm(sx,sy)
sdist[i,1]<-d
sdist[i,2]<-sites[i,2]
sdist[i,3]<-camsites$STA_SEQ[j]
write.csv(sdist,paste0("sdist",camsites$STA_SEQ[j],".csv"))
}
}
sdist
min(sdist$dist_M)
sdist$dist_M
camsites
sites
for(j in 1:dim(camsites)[1]){
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
sy<-as.numeric(camsites[j,c(4,3)])
d<-distm(sx,sy)
sdist[i,1]<-d
sdist[i,2]<-sites[i,2]
sdist[i,3]<-camsites$STA_SEQ[j]
write.csv(sdist,paste0("sdist",camsites$STA_SEQ[j],".csv"))
}
}
min(sdist$dist_M)
sdist$dist_M
min(sdist$dist_M,na.rm=TRUE)
sdist[sdist$dist_M==min(sdist$dist_M,na.rm=TRUE),]
sdist<-complete.cases(sdist)
sdist
sites
sites<-sites[1:70,]
sites
sdistmin<-data.frame(dist_M=double(),site_no=character(),STA_SEQ=numeric(),stringsAsFactors=FALSE)
sdisttest[1,]
sdisttest<-sdist[1,]
sdist[1,]
sdist
sdist<-data.frame(dist_M=double(),site_no=character(),STA_SEQ=numeric(),stringsAsFactors=FALSE)
sdistmin<-data.frame(dist_M=double(),site_no=character(),STA_SEQ=numeric(),stringsAsFactors=FALSE)
for(j in 1:dim(camsites)[1]){
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
sy<-as.numeric(camsites[j,c(4,3)])
d<-distm(sx,sy)
sdist[i,1]<-d
sdist[i,2]<-sites[i,2]
sdist[i,3]<-camsites$STA_SEQ[j]
write.csv(sdist,paste0("sdist",camsites$STA_SEQ[j],".csv"))
}
sdistmin[j,]<-sdist[sdist$dist_M==min(sdist$dist_M,na.rm=TRUE),]
}
sdistmin
merge(sdistmin,camsites,by="STA_SEQ")
View(sites)
sites
for(j in 1:dim(camsites)[1]){
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
sy<-as.numeric(camsites[j,c(4,3)])
d<-distm(sx,sy)
sdist[i,1]<-d
sdist[i,2]<-sites[i,2]
sdist[i,3]<-camsites$STA_SEQ[j]
#write.csv(sdist,paste0("sdist",camsites$STA_SEQ[j],".csv"))
}
sdistmin[j,]<-sdist[sdist$dist_M==min(sdist$dist_M,na.rm=TRUE),]
}
sdistmin
sdistmin<-merge(sdistmin,camsites,by="STA_SEQ")
sdistmin
sdistmin<-merge(sdistmin,sites,byx="site_no")
sdistmin
write.csv(sdistmin,"sdistmin.csv",row.names=FALSE)
library(geosphere)
setwd("P:/Projects/GitHub_Prj/FlowImpair")
camsites<-read.csv("TrailCamSites2018.csv",header=TRUE)
######Function to read in data from USGS data service correctly###############################
######assume one header line and tab delimited structure, with # as a comment out to skip#####
parse_fstat<-function(fstat_lines,skip='#',delim='\t'){
x<-1;
while(x<length(fstat_lines) && startsWith(fstat_lines[x],skip)){
x<-x+1;
}
header<-strsplit(fstat_lines[x],delim)[[1]];
D<-as.data.frame(matrix('',ncol=length(header),nrow=length(fstat_lines)-x),stringsAsFactors=F);
colnames(D)<-header;
for(i in x+2:length(fstat_lines)){
r<-strsplit(fstat_lines[i],delim)[[1]];
D[i-x-1,1:length(r)]<-r;
}
D
}
#####Includes active daily value gages################
site_url<-'https://waterservices.usgs.gov/nwis/site/?format=rdb&stateCd=ct&siteType=ST&siteStatus=active&hasDataTypeCd=dv'
sites<-parse_fstat(readLines(site_url))
sites<- sites[!is.na(sites$site_no),]
sites<-sites[1:70,]#Can't figure out why keeping SID
indexgage<-read.csv("usgsindexgage.csv",header=TRUE)
indexgage$SiteNumber<-paste("0",indexgage$SiteNumber,sep="")
indexgage
names(sites)
rsites<-merge(indexgage,sites,by.x=c("SitesNumber","site_no"))
indexgage<-read.csv("usgsindexgage.csv",header=TRUE)
indexgage$SiteNumber<-paste("0",indexgage$SiteNumber,sep="")
indexgage
rsites<-merge(indexgage,sites,by.x="site_no")
rsites
indexgage<-read.csv("usgsindexgage.csv",header=TRUE)
indexgage$SiteNumber<-paste("0",indexgage$SiteNumber,sep="")
rsites<-merge(indexgage,sites,by.x="site_no")
rsites
indexgage
indexgage<-read.csv("usgsindexgage.csv",header=TRUE)
indexgage$site_no<-paste("0",indexgage$site_no,sep="")
rsites<-merge(indexgage,sites,by.x="site_no")
rsites
indexgage<-read.csv("usgsindexgage.csv",header=TRUE)
indexgage$site_no<-paste("0",indexgage$site_no,sep="")
names(indexgage)
library(geosphere)
setwd("P:/Projects/GitHub_Prj/FlowImpair")
camsites<-read.csv("TrailCamSites2018.csv",header=TRUE)
######Function to read in data from USGS data service correctly###############################
######assume one header line and tab delimited structure, with # as a comment out to skip#####
parse_fstat<-function(fstat_lines,skip='#',delim='\t'){
x<-1;
while(x<length(fstat_lines) && startsWith(fstat_lines[x],skip)){
x<-x+1;
}
header<-strsplit(fstat_lines[x],delim)[[1]];
D<-as.data.frame(matrix('',ncol=length(header),nrow=length(fstat_lines)-x),stringsAsFactors=F);
colnames(D)<-header;
for(i in x+2:length(fstat_lines)){
r<-strsplit(fstat_lines[i],delim)[[1]];
D[i-x-1,1:length(r)]<-r;
}
D
}
#####Includes active daily value gages################
site_url<-'https://waterservices.usgs.gov/nwis/site/?format=rdb&stateCd=ct&siteType=ST&siteStatus=active&hasDataTypeCd=dv'
sites<-parse_fstat(readLines(site_url))
sites<- sites[!is.na(sites$site_no),]
sites<-sites[1:70,]#Can't figure out why keeping SID
indexgage<-read.csv("usgsindexgage.csv",header=TRUE)
indexgage$site_no<-paste("0",indexgage$site_no,sep="")
####Calculate geodesic distance (WGS84)#######################
####Stores closest gage based on min dist######################
####Does not take into account drainage add at later date######
#Empty dataframe
sdist<-data.frame(dist_M=double(),site_no=character(),STA_SEQ=numeric(),stringsAsFactors=FALSE)
sdistmin<-data.frame(dist_M=double(),site_no=character(),STA_SEQ=numeric(),stringsAsFactors=FALSE)
for(j in 1:dim(camsites)[1]){
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
sy<-as.numeric(camsites[j,c(4,3)])
d<-distm(sx,sy)
sdist[i,1]<-d
sdist[i,2]<-sites[i,2]
sdist[i,3]<-camsites$STA_SEQ[j]
#write.csv(sdist,paste0("sdist",camsites$STA_SEQ[j],".csv"))
}
sdistmin[j,]<-sdist[sdist$dist_M==min(sdist$dist_M,na.rm=TRUE),]
}
sdistmin<-merge(sdistmin,camsites,by="STA_SEQ")
sdistmin<-merge(sdistmin,sites,byx="site_no")
write.csv(sdistmin,"sdistmin.csv",row.names=FALSE)
####Calculate geodesic distance (WGS84)#######################
####Stores closest gage based on min dist######################
####Does not take into account drainage add at later date######
#Empty dataframe
rsdist<-data.frame(dist_M=double(),site_no=character(),STA_SEQ=numeric(),stringsAsFactors=FALSE)
rsdistmin<-data.frame(dist_M=double(),site_no=character(),STA_SEQ=numeric(),stringsAsFactors=FALSE)
for(j in 1:dim(camsites)[1]){
for (i in 1:dim(indexgage)[1])  {
sx<-as.numeric(indexgage[i,c(6,5)])
sy<-as.numeric(camsites[j,c(4,3)])
d<-distm(sx,sy)
rsdist[i,1]<-d
rsdist[i,2]<-indexgage[i,1]
rsdist[i,3]<-camsites$STA_SEQ[j]
#write.csv(sdist,paste0("sdist",camsites$STA_SEQ[j],".csv"))
}
rsdistmin[j,]<-rsdist[rsdist$dist_M==min(rsdist$dist_M,na.rm=TRUE),]
}
rsdistmin<-merge(sdistmin,camsites,by="STA_SEQ")
rsdistmin<-merge(sdistmin,sites,byx="site_no")
write.csv(rsdistmin,"rsdistmin.csv",row.names=FALSE)
names(indexgage)
rsdist<-data.frame(dist_M=double(),site_no=character(),STA_SEQ=numeric(),stringsAsFactors=FALSE)
rsdistmin<-data.frame(dist_M=double(),site_no=character(),STA_SEQ=numeric(),stringsAsFactors=FALSE)
for(j in 1:dim(camsites)[1]){
for (i in 1:dim(indexgage)[1])  {
sx<-as.numeric(indexgage[i,c(6,5)])
sy<-as.numeric(camsites[j,c(4,3)])
d<-distm(sx,sy)
rsdist[i,1]<-d
rsdist[i,2]<-indexgage[i,1]
rsdist[i,3]<-camsites$STA_SEQ[j]
#write.csv(sdist,paste0("sdist",camsites$STA_SEQ[j],".csv"))
}
rsdistmin[j,]<-rsdist[rsdist$dist_M==min(rsdist$dist_M,na.rm=TRUE),]
}
rsdistmin<-merge(rsdistmin,camsites,by="STA_SEQ")
rsdistmin<-merge(rsdistmin,indexgage,by.x="site_no",by.y="SiteNumber")
rsdistmin
rsdist<-data.frame(dist_M=double(),site_no=character(),STA_SEQ=numeric(),stringsAsFactors=FALSE)
rsdistmin<-data.frame(dist_M=double(),site_no=character(),STA_SEQ=numeric(),stringsAsFactors=FALSE)
for(j in 1:dim(camsites)[1]){
for (i in 1:dim(indexgage)[1])  {
sx<-as.numeric(indexgage[i,c(6,5)])
sy<-as.numeric(camsites[j,c(4,3)])
d<-distm(sx,sy)
rsdist[i,1]<-d
rsdist[i,2]<-indexgage[i,1]
rsdist[i,3]<-camsites$STA_SEQ[j]
#write.csv(sdist,paste0("sdist",camsites$STA_SEQ[j],".csv"))
}
rsdistmin[j,]<-rsdist[rsdist$dist_M==min(rsdist$dist_M,na.rm=TRUE),]
}
rsdistmin
names(indexgage)
indexgage[1,c(6,5)]
camsites[1,c(4,3)]
rsdist<-data.frame(dist_M=double(),site_no=character(),STA_SEQ=numeric(),stringsAsFactors=FALSE)
rsdistmin<-data.frame(dist_M=double(),site_no=character(),STA_SEQ=numeric(),stringsAsFactors=FALSE)
for(j in 1:dim(camsites)[1]){
for (i in 1:dim(indexgage)[1])  {
sx<-as.numeric(indexgage[i,c(5,6)])
sy<-as.numeric(camsites[j,c(4,3)])
d<-distm(sx,sy)
rsdist[i,1]<-d
rsdist[i,2]<-indexgage[i,1]
rsdist[i,3]<-camsites$STA_SEQ[j]
#write.csv(sdist,paste0("sdist",camsites$STA_SEQ[j],".csv"))
}
rsdistmin[j,]<-rsdist[rsdist$dist_M==min(rsdist$dist_M,na.rm=TRUE),]
}
rsdistmin
rsdistmin<-merge(rsdistmin,camsites,by="STA_SEQ")
rsdistmin<-merge(rsdistmin,indexgage,by.x="site_no",by.y="SiteNumber")
write.csv(rsdistmin,"rsdistmin.csv",row.names=FALSE)
library(geosphere)
library(leaflet)
setwd("/Users/tbecker/Documents/GitHub/FlowImpair")
camsites<-read.csv("TrailCamSites2018.csv",header=TRUE)
install.packages("geosphere")
library(geosphere)
library(leaflet)
setwd("/Users/tbecker/Documents/GitHub/FlowImpair")
camsites<-read.csv("TrailCamSites2018.csv",header=TRUE)
parse_fstat<-function(fstat_lines,skip='#',delim='\t'){
x<-1;
while(x<length(fstat_lines) && startsWith(fstat_lines[x],skip)){
x<-x+1;
}
header<-strsplit(fstat_lines[x],delim)[[1]];
D<-as.data.frame(matrix('',ncol=length(header),nrow=length(fstat_lines)-x),stringsAsFactors=F);
colnames(D)<-header;
for(i in x+2:length(fstat_lines)){
r<-strsplit(fstat_lines[i],delim)[[1]];
D[i-x-1,1:length(r)]<-r;
}
D
}
site_url<-'https://waterservices.usgs.gov/nwis/site/?format=rdb&stateCd=ct&siteType=ST&siteStatus=active&hasDataTypeCd=dv'
sites<-parse_fstat(readLines(site_url))
sites<- sites[!is.na(sites$site_no),]
sites<-sites[1:70,]#Can't figure out why keeping SID
indexgage<-read.csv("usgsindexgage.csv",header=TRUE)
indexgage$site_no<-paste("0",indexgage$site_no,sep="")
sdist<-data.frame(dist_M=double(),site_no=character(),STA_SEQ=numeric(),stringsAsFactors=FALSE)
sdistmin<-data.frame(dist_M=double(),site_no=character(),STA_SEQ=numeric(),stringsAsFactors=FALSE)
for(j in 1:dim(camsites)[1]){
for (i in 1:dim(sites)[1])  {
sx<-as.numeric(sites[i,c(6,5)])
sy<-as.numeric(camsites[j,c(4,3)])
d<-distm(sx,sy)
sdist[i,1]<-d
sdist[i,2]<-sites[i,2]
sdist[i,3]<-camsites$STA_SEQ[j]
#write.csv(sdist,paste0("sdist",camsites$STA_SEQ[j],".csv"))
}
sdistmin[j,]<-sdist[sdist$dist_M==min(sdist$dist_M,na.rm=TRUE),]
}
sdistmin<-merge(sdistmin,camsites,by="STA_SEQ")
sdistmin<-merge(sdistmin,sites,byx="site_no")
sdistmin
names(sdistmin)
m <-  leaflet(sdistmin) %>% setView(lng = -73.0877, lat = 41.6032, zoom = 12)%>%
addTiles()%>%
addCircleMarkers(lng = XLong, lat = YLat, color = 'red') %>%
addCircleMarkers(lng = dec_long_va, lat = dec_lat_va, color = 'blue')
m <-  leaflet(sdistmin) %>% setView(lng = -73.0877, lat = 41.6032, zoom = 12)%>%
addTiles()%>%
addCircleMarkers(lng = sdistmin$XLong, lat = sdistmin$YLat, color = 'red') %>%
addCircleMarkers(lng = sdistmin$dec_long_va, lat = sdistmin$dec_lat_va, color = 'blue')
m
m <-  leaflet(sdistmin) %>% setView(lng = -73.0877, lat = 41.6032, zoom = 8)%>%
addTiles()%>%
addCircleMarkers(lng = sdistmin$XLong, lat = sdistmin$YLat, color = 'red') %>%
addCircleMarkers(lng = sdistmin$dec_long_va, lat = sdistmin$dec_lat_va, color = 'blue')
m <-  leaflet(sdistmin) %>% setView(lng = -73.0877, lat = 41.6032, zoom = 20)%>%
addTiles()%>%
addCircleMarkers(lng = sdistmin$XLong, lat = sdistmin$YLat, color = 'red') %>%
addCircleMarkers(lng = sdistmin$dec_long_va, lat = sdistmin$dec_lat_va, color = 'blue')
m <-  leaflet(sdistmin) %>% setView(lng = -73.0877, lat = 41.6032, zoom = 20)%>%
addTiles()%>%
addCircleMarkers(lng = sdistmin$XLong, lat = sdistmin$YLat, color = 'red') %>%
addCircleMarkers(lng = sdistmin$dec_long_va, lat = sdistmin$dec_lat_va, color = 'blue')
m
m <-  leaflet(sdistmin) %>% setView(lng = -73.0877, lat = 41.6032, zoom = 8)%>%
addTiles()%>%
addCircleMarkers(lng = sdistmin$XLong, lat = sdistmin$YLat, color = 'red') %>%
addCircleMarkers(lng = sdistmin$dec_long_va, lat = sdistmin$dec_lat_va, color = 'blue')
m
indexgage
names(indexgage)
m <-  leaflet(sdistmin) %>% setView(lng = -73.0877, lat = 41.6032, zoom = 8)%>%
addTiles()%>%
addCircleMarkers(lng = sdistmin$XLong, lat = sdistmin$YLat, color = 'red') %>%
addCircleMarkers(lng = indexgage$SiteLongitude, lat = indexgage$SiteLatitude, color = 'blue')
m
leaflet(sdistmin) %>% setView(lng = -72.669495, lat = 41.76371, zoom = 8)%>%
addTiles()%>%
addCircleMarkers(lng = sdistmin$XLong, lat = sdistmin$YLat, color = 'red') %>%
addCircleMarkers(lng = indexgage$SiteLongitude, lat = indexgage$SiteLatitude, color = 'blue')
m
names(sdistmin)
m <-  leaflet(sdistmin) %>% setView(lng = -72.669495, lat = 41.76371, zoom = 8)%>%
addTiles()%>%
addCircleMarkers(lng = sdistmin$XLong, lat = sdistmin$YLat,
color = 'red',popup=sdistmin$Station_Name) %>%
addCircleMarkers(lng = indexgage$SiteLongitude, lat = indexgage$SiteLatitude, color = 'blue')
m
m <-  leaflet(sdistmin) %>% setView(lng = -72.669495, lat = 41.76371, zoom = 8)%>%
addTiles()%>%
addCircleMarkers(lng = sdistmin$XLong, lat = sdistmin$YLat,
color = 'red',popup=sdistmin$Station_Name) %>%
addCircleMarkers(lng = indexgage$SiteLongitude, lat = indexgage$SiteLatitude,
color = 'blue',popup=indexgage$SiteName)
m
m <-  leaflet(sdistmin) %>% setView(lng = -72.669495, lat = 41.76371, zoom = 8)%>%
addTiles()%>%
addCircleMarkers(lng = sdistmin$XLong, lat = sdistmin$YLat,
color = 'red',popup=sdistmin$Station_Name) %>%
addCircleMarkers(lng = indexgage$SiteLongitude, lat = indexgage$SiteLatitude,
color = 'blue',popup=indexgage$SiteName)+
addLegendCustom(colors = c("red", "blue"),
labels = c("Cam Sites", "USGS Ref Gage"))
m <-  leaflet(sdistmin) %>% setView(lng = -72.669495, lat = 41.76371, zoom = 8)%>%
addTiles()%>%
addCircleMarkers(lng = sdistmin$XLong, lat = sdistmin$YLat,
color = 'red',popup=sdistmin$Station_Name) %>%
addCircleMarkers(lng = indexgage$SiteLongitude, lat = indexgage$SiteLatitude,
color = 'blue',popup=indexgage$SiteName)%>%
addLegendCustom(colors = c("red", "blue"),
labels = c("Cam Sites", "USGS Ref Gage"))
m
m <-  leaflet(sdistmin) %>% setView(lng = -72.669495, lat = 41.76371, zoom = 8)%>%
addTiles()%>%
addCircleMarkers(lng = sdistmin$XLong, lat = sdistmin$YLat,
color = 'red',popup=sdistmin$Station_Name) %>%
addCircleMarkers(lng = indexgage$SiteLongitude, lat = indexgage$SiteLatitude,
color = 'blue',popup=indexgage$SiteName)%>%
addLegend(colors=c("red","blue"),labels=c("CamSite","USGS Ref Gage"))
m
m <-  leaflet(sdistmin) %>% setView(lng = -72.669495, lat = 41.76371, zoom = 8)%>%
addTiles()%>%
addCircleMarkers(lng = sdistmin$XLong, lat = sdistmin$YLat,
color = 'red',popup=sdistmin$Station_Name) %>%
addCircleMarkers(lng = indexgage$SiteLongitude, lat = indexgage$SiteLatitude,
color = 'blue',popup=indexgage$SiteName)%>%
addLegend(position="bottomright",colors=c("red","blue"),
labels=c("CamSite","USGS Ref Gage"))
m
m <-  leaflet(sdistmin) %>% setView(lng = -72.669495, lat = 41.76371, zoom = 9)%>%
addTiles()%>%
addCircleMarkers(lng = sdistmin$XLong, lat = sdistmin$YLat,
color = 'red',popup=sdistmin$Station_Name) %>%
addCircleMarkers(lng = indexgage$SiteLongitude, lat = indexgage$SiteLatitude,
color = 'blue',popup=indexgage$SiteName)%>%
addLegend(position="bottomright",colors=c("red","blue"),
labels=c("CamSite","USGS Ref Gage"))
m
names(camsites)
m<-  leaflet() %>% setView(lng = -72.669495, lat = 41.76371, zoom = 9)%>%
addTiles()%>%
addCircleMarkers(lng = camsites$XLong, lat = camsites$YLat,
color = 'red',popup=sdistmin$Station_Name) %>%
addCircleMarkers(lng = indexgage$SiteLongitude, lat = indexgage$SiteLatitude,
color = 'blue',popup=indexgage$SiteName)%>%
addLegend(position="bottomright",colors=c("red","blue"),
labels=c("CamSite","USGS Ref Gage"))
m
m<-  leaflet() %>% setView(lng = -72.669495, lat = 41.76371, zoom = 9)%>%
addTiles()%>%
addCircleMarkers(lng = sdistmin$XLong, lat = sdistmin$YLat,
color = 'red',popup=paste("SName:",sdistmin$Station_Name,"<br>",
"CloseUSGSGage",
sdistmin$station_nm)) %>%
addCircleMarkers(lng = indexgage$SiteLongitude, lat = indexgage$SiteLatitude,
color = 'blue',popup=indexgage$SiteName)%>%
addLegend(position="bottomright",colors=c("red","blue"),
labels=c("CamSite","USGS Ref Gage"))
m
names(rsdistmin)
rsdist<-data.frame(dist_M=double(),site_no=character(),STA_SEQ=numeric(),stringsAsFactors=FALSE)
rsdistmin<-data.frame(dist_M=double(),site_no=character(),STA_SEQ=numeric(),stringsAsFactors=FALSE)
for(j in 1:dim(camsites)[1]){
for (i in 1:dim(indexgage)[1])  {
sx<-as.numeric(indexgage[i,c(5,6)])
sy<-as.numeric(camsites[j,c(4,3)])
d<-distm(sx,sy)
rsdist[i,1]<-d
rsdist[i,2]<-indexgage[i,1]
rsdist[i,3]<-camsites$STA_SEQ[j]
#write.csv(sdist,paste0("sdist",camsites$STA_SEQ[j],".csv"))
}
rsdistmin[j,]<-rsdist[rsdist$dist_M==min(rsdist$dist_M,na.rm=TRUE),]
}
rsdistmin<-merge(rsdistmin,camsites,by="STA_SEQ")
rsdistmin<-merge(rsdistmin,indexgage,by.x="site_no",by.y="SiteNumber")
names(rsdistmin)
m<-  leaflet() %>% setView(lng = -72.669495, lat = 41.76371, zoom = 9)%>%
addTiles()%>%
addCircleMarkers(lng = rsdistmin$XLong, lat = rsdistmin$YLat,
color = 'red',popup=paste("SName:",rsdistmin$Station_Name,"<br>",
"CloseUSGSGage",
rsdistmin$SiteName)) %>%
addCircleMarkers(lng = indexgage$SiteLongitude, lat = indexgage$SiteLatitude,
color = 'blue',popup=indexgage$SiteName)%>%
addLegend(position="bottomright",colors=c("red","blue"),
labels=c("CamSite","USGS Ref Gage"))
m
