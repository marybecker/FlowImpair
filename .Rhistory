primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
}
shinyApp(ui,server)
getwd(0)
getwd()
runApp()
if(!require(RODBC)| !require(leaflet)|!require(shiny)) {
install.packages(c('RODBC','leaflet','shiny'),dependencies = TRUE)
}
runApp()
getwd
getwd()
###Check for required libraries and load and/or install
if(!require(RODBC)| !require(leaflet)|!require(shiny)) {
install.packages(c('RODBC','leaflet','shiny'),dependencies = TRUE)
}
####Connect to AWQ DB and get most recent stations table
cn<- odbcDriverConnect("Driver=ODBC Driver 13 for SQL Server; Server= 10.18.8.110; Database=WQX;
Uid=wqx_readonly;Pwd=wqx_readonly")
sites<- sqlFetch(cn,"Stations")
sites$SID<- paste(sites$Station_Name,sites$STA_SEQ)
odbcClose(cn)
#######Load user interface
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
)
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
}
shinyApp(ui,server)
shinyApp(
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
)
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
})
app<- shinyApp(
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
)
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
})
app<- shinyApp(
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
)
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
}
)
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
}
app<- shinyApp(
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
)
server<- function(input,output){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
}
)
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
)
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
}
shinyApp(ui,server)
shinyApp(
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
),
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
})
app<- shinyApp(
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
),
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
})
app
app<- shinyApp(
####Connect to AWQ DB and get most recent stations table
cn<- odbcDriverConnect("Driver=ODBC Driver 13 for SQL Server; Server= 10.18.8.110; Database=WQX;
Uid=wqx_readonly;Pwd=wqx_readonly")
sites<- sqlFetch(cn,"Stations")
sites$SID<- paste(sites$Station_Name,sites$STA_SEQ)
odbcClose(cn)
#######Load user interface
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("m",width = "100%", height = "100%"),
absolutePanel(top=10,left=100,
h3("AWQ Stations Search"),
selectInput("ID","Search by stream name or SID",choices=c("",sites$SID))
)
),
server<- function(input,output,session){
output$m <- renderLeaflet({
leaflet(data=sites) %>% setView(lng = -72.7725, lat = 41.5, zoom = 9)%>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addCircleMarkers(~XLong, ~YLat, radius = 2, label=paste(sites$SID),
popup = paste(sep="<br/>",
sites$Station_Name,
paste("SID", sites$STA_SEQ),
sites$Proximity_Landmark))%>%
addMeasure(
position = "topright",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addEasyButton(easyButton(
icon="fa-home", title="Zoom to State",
onClick=JS("function(btn, map){ map.setZoom(9); }")))
})
#Update the map and view on select input changes#
observeEvent(input$ID, {
p<- subset(sites, SID==input$ID)
if(nrow(p)==0){
leafletProxy("m") %>% removeMarker(layerId="Selected")
} else {
leafletProxy("m") %>%
setView(lng=p$XLong, lat=p$YLat,zoom=15) %>%
addCircleMarkers(p$XLong, p$YLat, radius=10, color="black",
fillOpacity=0, opacity=1, stroke=TRUE, label=paste(p$SID),
popup=paste(sep="<br/>",p$Station_Name,
paste("SID",p$STA_SEQ),sites$Proximity_Landmark),
layerId="Selected")
}
})
})
library(ggplot2)
library(lubridate)
library(reshape2)
setwd("P:/Projects/GitHub_Prj/FlowImpair")
indexgage<-read.csv("usgsindexgage.csv",header=TRUE)
indexgage$SiteNumber<-paste("0",indexgage$SiteNumber,sep="")
######Function to read in data from USGS data service correctly###############################
######assume one header line and tab delimited structure, with # as a comment out to skip#####
parse_fstat<-function(fstat_lines,skip='#',delim='\t'){
x<-1;
while(x<length(fstat_lines) && startsWith(fstat_lines[x],skip)){
x<-x+1;
}
header<-strsplit(fstat_lines[x],delim)[[1]];
D<-as.data.frame(matrix('',ncol=length(header),nrow=length(fstat_lines)-x),stringsAsFactors=F);
colnames(D)<-header;
for(i in x+2:length(fstat_lines)){
r<-strsplit(fstat_lines[i],delim)[[1]];
D[i-x-1,1:length(r)]<-r;
}
D
}
#character string from right
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
